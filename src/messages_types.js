//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Datapoint = function(args) {
  this.value = null;
  this.timestamp = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
Datapoint.prototype = {};
Datapoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Datapoint.prototype.write = function(output) {
  output.writeStructBegin('Datapoint');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Paneldata = function(args) {
  this.target = null;
  this.datapoints = null;
  if (args) {
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.datapoints !== undefined && args.datapoints !== null) {
      this.datapoints = Thrift.copyList(args.datapoints, [Datapoint]);
    }
  }
};
Paneldata.prototype = {};
Paneldata.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.datapoints = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new Datapoint();
          elem3.read(input);
          this.datapoints.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Paneldata.prototype.write = function(output) {
  output.writeStructBegin('Paneldata');
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 1);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  if (this.datapoints !== null && this.datapoints !== undefined) {
    output.writeFieldBegin('datapoints', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.datapoints.length);
    for (var iter4 in this.datapoints) {
      if (this.datapoints.hasOwnProperty(iter4)) {
        iter4 = this.datapoints[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Dataresponse = function(args) {
  this.paneldata = null;
  if (args) {
    if (args.paneldata !== undefined && args.paneldata !== null) {
      this.paneldata = Thrift.copyList(args.paneldata, [Paneldata]);
    }
  }
};
Dataresponse.prototype = {};
Dataresponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.paneldata = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new Paneldata();
          elem8.read(input);
          this.paneldata.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Dataresponse.prototype.write = function(output) {
  output.writeStructBegin('Dataresponse');
  if (this.paneldata !== null && this.paneldata !== undefined) {
    output.writeFieldBegin('paneldata', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.paneldata.length);
    for (var iter9 in this.paneldata) {
      if (this.paneldata.hasOwnProperty(iter9)) {
        iter9 = this.paneldata[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

